<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace:名称空间
-->
<mapper namespace="com.itheima.mapper.BrandMapper">

    <!--数据库表的字段名称和实体类的属性名称不一样则不能封装数据
            *起别名：对不一样的列名起别名，让别名和实体类的属性名一样
                *缺点：每次查询都要定义一次别名
            resultMap：
                1.定义<resuultMap>标签
                2.在<select>标签中，使用resultMap属性替换 resultTy属性
    -->
    <!--<select id="selectAll" resultType="Brand">
        select *
        from tb_brand;
    </select>-->

    <!--
        id:完成主键字段的映射
            column：表的列名；
            property：实体类的属性名；
        result：完成一般字段的映射
            column：表的列名；
            property：实体类的属性名；
    -->
    <resultMap id="brandResultMap" type="brand">
        <result property="brandName" column="brand_name"/>
        <result property="companyName" column="company_name"/>
    </resultMap>
    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>

    <!--
        *参数占位符
            1.#{}：会将其替换为？，为了防止sql注入
            2.${}:拼sql，会存在SQL注入问题
            3.使用时机：
                参数传递的时候：#{}
                表名或者列名不固定的情况${}

        *参数类型：parameterType：可以省略
        *特殊字符处理：
            1.转义字符
            2.CDATA区
    -->
    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>

    <!--条件查询-->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                and status = #{status}
            </if>

            <if test="companyName != null and companyName != '' ">
                and company_name like #{companyName}
            </if>

            <if test="brandName != null and brandName != '' ">
                and company_name like #{brandName}
            </if>
        </where>
    </select>

</mapper>